<?xml version="1.0"?>
<ruleset name="Custom ruleset"
  xmlns="http://pmd.sourceforge.net/ruleset/2.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://pmd.sourceforge.net/ruleset/2.0.0
  http://pmd.sourceforge.net/ruleset_2_0_0.xsd">
    <description>
        This ruleset checks my code for bad stuff
    </description>
    <rule ref="category/java/design.xml/CyclomaticComplexity">
    <properties>
        <property name="methodReportLevel" value="2"/>
    </properties>
	</rule>
	<rule ref="category/java/design.xml/CouplingBetweenObjects">
		<properties>
        <property name="threshold" value="2"/>
    </properties>
	</rule>
	<rule ref="category/java/design.xml/ExcessiveClassLength">
	<properties>
        <property name="minimum" value="100"/>
    </properties>
	</rule>
	<rule ref="category/java/design.xml/ExcessiveMethodLength">
		<properties>
	        <property name="minimum" value="30"/>
	    </properties>
	</rule>
	<rule ref="category/java/design.xml/NPathComplexity">
		<properties>
        <property name="reportLevel" value="10"/>
    </properties>
</rule>
<rule ref="category/java/bestpractices.xml/LooseCoupling" />


</ruleset>


For Task 5
Since the method Amount_saved could be potentially longer in terms of LOC, it could contribute 
to the violation of rules ExcessiveMethodLength as well as ExcessiveClassLength; thus, these 
two rules would be helpful to track the code smell Large Class, where a class may be too large 
to lose its sense of identity and may need further decomposition into smaller classes.
In addition, long parameter list could also be an issue in the method Amount_saved() 
as shown in the if statements. So once again the rules ExcessiveMethodLength as well as 
ExcessiveClassLength will be helpful here.
